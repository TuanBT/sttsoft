#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STTSoft.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="STTSOFT")]
	public partial class STTSoftDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertDiscount(Discount instance);
    partial void UpdateDiscount(Discount instance);
    partial void DeleteDiscount(Discount instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    #endregion
		
		public STTSoftDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["STTSOFTConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public STTSoftDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public STTSoftDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public STTSoftDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public STTSoftDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Discount> Discounts
		{
			get
			{
				return this.GetTable<Discount>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccName;
		
		private string _AccRole;
		
		private System.Nullable<int> _AccLevel;
		
		private string _AccMail;
		
		private string _AccPhone;
		
		private string _AccPass;
		
		private EntityRef<Bank> _Bank;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Discount> _Discount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccNameChanging(string value);
    partial void OnAccNameChanged();
    partial void OnAccRoleChanging(string value);
    partial void OnAccRoleChanged();
    partial void OnAccLevelChanging(System.Nullable<int> value);
    partial void OnAccLevelChanged();
    partial void OnAccMailChanging(string value);
    partial void OnAccMailChanged();
    partial void OnAccPhoneChanging(string value);
    partial void OnAccPhoneChanged();
    partial void OnAccPassChanging(string value);
    partial void OnAccPassChanged();
    #endregion
		
		public Account()
		{
			this._Bank = default(EntityRef<Bank>);
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Discount = default(EntityRef<Discount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccName
		{
			get
			{
				return this._AccName;
			}
			set
			{
				if ((this._AccName != value))
				{
					this.OnAccNameChanging(value);
					this.SendPropertyChanging();
					this._AccName = value;
					this.SendPropertyChanged("AccName");
					this.OnAccNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccRole", DbType="NVarChar(50)")]
		public string AccRole
		{
			get
			{
				return this._AccRole;
			}
			set
			{
				if ((this._AccRole != value))
				{
					this.OnAccRoleChanging(value);
					this.SendPropertyChanging();
					this._AccRole = value;
					this.SendPropertyChanged("AccRole");
					this.OnAccRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccLevel", DbType="Int")]
		public System.Nullable<int> AccLevel
		{
			get
			{
				return this._AccLevel;
			}
			set
			{
				if ((this._AccLevel != value))
				{
					if (this._Discount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccLevelChanging(value);
					this.SendPropertyChanging();
					this._AccLevel = value;
					this.SendPropertyChanged("AccLevel");
					this.OnAccLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccMail", DbType="NVarChar(50)")]
		public string AccMail
		{
			get
			{
				return this._AccMail;
			}
			set
			{
				if ((this._AccMail != value))
				{
					this.OnAccMailChanging(value);
					this.SendPropertyChanging();
					this._AccMail = value;
					this.SendPropertyChanged("AccMail");
					this.OnAccMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccPhone", DbType="NVarChar(50)")]
		public string AccPhone
		{
			get
			{
				return this._AccPhone;
			}
			set
			{
				if ((this._AccPhone != value))
				{
					this.OnAccPhoneChanging(value);
					this.SendPropertyChanging();
					this._AccPhone = value;
					this.SendPropertyChanged("AccPhone");
					this.OnAccPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccPass", DbType="NVarChar(50)")]
		public string AccPass
		{
			get
			{
				return this._AccPass;
			}
			set
			{
				if ((this._AccPass != value))
				{
					this.OnAccPassChanging(value);
					this.SendPropertyChanging();
					this._AccPass = value;
					this.SendPropertyChanged("AccPass");
					this.OnAccPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Bank", Storage="_Bank", ThisKey="AccName", OtherKey="AccName", IsUnique=true, IsForeignKey=false)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Account = null;
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Orders", ThisKey="AccName", OtherKey="AccName")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_Account", Storage="_Discount", ThisKey="AccLevel", OtherKey="AccLevel", IsForeignKey=true)]
		public Discount Discount
		{
			get
			{
				return this._Discount.Entity;
			}
			set
			{
				Discount previousValue = this._Discount.Entity;
				if (((previousValue != value) 
							|| (this._Discount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discount.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Discount.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._AccLevel = value.AccLevel;
					}
					else
					{
						this._AccLevel = default(Nullable<int>);
					}
					this.SendPropertyChanged("Discount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProId;
		
		private string _ProName;
		
		private string _ProDetail;
		
		private string _ProImage;
		
		private System.Nullable<int> _CatId;
		
		private double _ProPrice;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProIdChanging(int value);
    partial void OnProIdChanged();
    partial void OnProNameChanging(string value);
    partial void OnProNameChanged();
    partial void OnProDetailChanging(string value);
    partial void OnProDetailChanged();
    partial void OnProImageChanging(string value);
    partial void OnProImageChanged();
    partial void OnCatIdChanging(System.Nullable<int> value);
    partial void OnCatIdChanged();
    partial void OnProPriceChanging(double value);
    partial void OnProPriceChanged();
    #endregion
		
		public Product()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProId
		{
			get
			{
				return this._ProId;
			}
			set
			{
				if ((this._ProId != value))
				{
					this.OnProIdChanging(value);
					this.SendPropertyChanging();
					this._ProId = value;
					this.SendPropertyChanged("ProId");
					this.OnProIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProName", DbType="NVarChar(50)")]
		public string ProName
		{
			get
			{
				return this._ProName;
			}
			set
			{
				if ((this._ProName != value))
				{
					this.OnProNameChanging(value);
					this.SendPropertyChanging();
					this._ProName = value;
					this.SendPropertyChanged("ProName");
					this.OnProNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProDetail", DbType="NVarChar(50)")]
		public string ProDetail
		{
			get
			{
				return this._ProDetail;
			}
			set
			{
				if ((this._ProDetail != value))
				{
					this.OnProDetailChanging(value);
					this.SendPropertyChanging();
					this._ProDetail = value;
					this.SendPropertyChanged("ProDetail");
					this.OnProDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProImage", DbType="NVarChar(50)")]
		public string ProImage
		{
			get
			{
				return this._ProImage;
			}
			set
			{
				if ((this._ProImage != value))
				{
					this.OnProImageChanging(value);
					this.SendPropertyChanging();
					this._ProImage = value;
					this.SendPropertyChanged("ProImage");
					this.OnProImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatId", DbType="Int")]
		public System.Nullable<int> CatId
		{
			get
			{
				return this._CatId;
			}
			set
			{
				if ((this._CatId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatIdChanging(value);
					this.SendPropertyChanging();
					this._CatId = value;
					this.SendPropertyChanged("CatId");
					this.OnCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProPrice", DbType="Float NOT NULL")]
		public double ProPrice
		{
			get
			{
				return this._ProPrice;
			}
			set
			{
				if ((this._ProPrice != value))
				{
					this.OnProPriceChanging(value);
					this.SendPropertyChanging();
					this._ProPrice = value;
					this.SendPropertyChanged("ProPrice");
					this.OnProPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Comment", Storage="_Comments", ThisKey="ProId", OtherKey="ProId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderDetail", Storage="_OrderDetails", ThisKey="ProId", OtherKey="ProId")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="CatId", OtherKey="CatId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CatId = value.CatId;
					}
					else
					{
						this._CatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccName;
		
		private System.Nullable<double> _BanMoney;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccNameChanging(string value);
    partial void OnAccNameChanged();
    partial void OnBanMoneyChanging(System.Nullable<double> value);
    partial void OnBanMoneyChanged();
    #endregion
		
		public Bank()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccName
		{
			get
			{
				return this._AccName;
			}
			set
			{
				if ((this._AccName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccNameChanging(value);
					this.SendPropertyChanging();
					this._AccName = value;
					this.SendPropertyChanged("AccName");
					this.OnAccNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BanMoney", DbType="Float")]
		public System.Nullable<double> BanMoney
		{
			get
			{
				return this._BanMoney;
			}
			set
			{
				if ((this._BanMoney != value))
				{
					this.OnBanMoneyChanging(value);
					this.SendPropertyChanging();
					this._BanMoney = value;
					this.SendPropertyChanged("BanMoney");
					this.OnBanMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Bank", Storage="_Account", ThisKey="AccName", OtherKey="AccName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Bank = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Bank = this;
						this._AccName = value.AccName;
					}
					else
					{
						this._AccName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatId;
		
		private string _CatName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatIdChanging(int value);
    partial void OnCatIdChanged();
    partial void OnCatNameChanging(string value);
    partial void OnCatNameChanged();
    #endregion
		
		public Category()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatId
		{
			get
			{
				return this._CatId;
			}
			set
			{
				if ((this._CatId != value))
				{
					this.OnCatIdChanging(value);
					this.SendPropertyChanging();
					this._CatId = value;
					this.SendPropertyChanged("CatId");
					this.OnCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatName", DbType="NVarChar(50)")]
		public string CatName
		{
			get
			{
				return this._CatName;
			}
			set
			{
				if ((this._CatName != value))
				{
					this.OnCatNameChanging(value);
					this.SendPropertyChanging();
					this._CatName = value;
					this.SendPropertyChanged("CatName");
					this.OnCatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="CatId", OtherKey="CatId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComId;
		
		private System.Nullable<int> _ProId;
		
		private string _ComContent;
		
		private string _AccName;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComIdChanging(int value);
    partial void OnComIdChanged();
    partial void OnProIdChanging(System.Nullable<int> value);
    partial void OnProIdChanged();
    partial void OnComContentChanging(string value);
    partial void OnComContentChanged();
    partial void OnAccNameChanging(string value);
    partial void OnAccNameChanged();
    #endregion
		
		public Comment()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ComId
		{
			get
			{
				return this._ComId;
			}
			set
			{
				if ((this._ComId != value))
				{
					this.OnComIdChanging(value);
					this.SendPropertyChanging();
					this._ComId = value;
					this.SendPropertyChanged("ComId");
					this.OnComIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProId", DbType="Int")]
		public System.Nullable<int> ProId
		{
			get
			{
				return this._ProId;
			}
			set
			{
				if ((this._ProId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProIdChanging(value);
					this.SendPropertyChanging();
					this._ProId = value;
					this.SendPropertyChanged("ProId");
					this.OnProIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComContent", DbType="NVarChar(MAX)")]
		public string ComContent
		{
			get
			{
				return this._ComContent;
			}
			set
			{
				if ((this._ComContent != value))
				{
					this.OnComContentChanging(value);
					this.SendPropertyChanging();
					this._ComContent = value;
					this.SendPropertyChanged("ComContent");
					this.OnComContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccName", DbType="NVarChar(50)")]
		public string AccName
		{
			get
			{
				return this._AccName;
			}
			set
			{
				if ((this._AccName != value))
				{
					this.OnAccNameChanging(value);
					this.SendPropertyChanging();
					this._AccName = value;
					this.SendPropertyChanged("AccName");
					this.OnAccNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Comment", Storage="_Product", ThisKey="ProId", OtherKey="ProId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ProId = value.ProId;
					}
					else
					{
						this._ProId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discount")]
	public partial class Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccLevel;
		
		private System.Nullable<int> _DisPercent;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccLevelChanging(int value);
    partial void OnAccLevelChanged();
    partial void OnDisPercentChanging(System.Nullable<int> value);
    partial void OnDisPercentChanged();
    #endregion
		
		public Discount()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccLevel", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccLevel
		{
			get
			{
				return this._AccLevel;
			}
			set
			{
				if ((this._AccLevel != value))
				{
					this.OnAccLevelChanging(value);
					this.SendPropertyChanging();
					this._AccLevel = value;
					this.SendPropertyChanged("AccLevel");
					this.OnAccLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisPercent", DbType="Int")]
		public System.Nullable<int> DisPercent
		{
			get
			{
				return this._DisPercent;
			}
			set
			{
				if ((this._DisPercent != value))
				{
					this.OnDisPercentChanging(value);
					this.SendPropertyChanging();
					this._DisPercent = value;
					this.SendPropertyChanged("DisPercent");
					this.OnDisPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_Account", Storage="_Accounts", ThisKey="AccLevel", OtherKey="AccLevel")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Discount = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Discount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrId;
		
		private string _AccName;
		
		private System.Nullable<decimal> _OrTotal;
		
		private System.Nullable<System.DateTime> _OrDate;
		
		private string _OrdSaler;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrIdChanging(int value);
    partial void OnOrIdChanged();
    partial void OnAccNameChanging(string value);
    partial void OnAccNameChanged();
    partial void OnOrTotalChanging(System.Nullable<decimal> value);
    partial void OnOrTotalChanged();
    partial void OnOrDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrDateChanged();
    partial void OnOrdSalerChanging(string value);
    partial void OnOrdSalerChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrId
		{
			get
			{
				return this._OrId;
			}
			set
			{
				if ((this._OrId != value))
				{
					this.OnOrIdChanging(value);
					this.SendPropertyChanging();
					this._OrId = value;
					this.SendPropertyChanged("OrId");
					this.OnOrIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccName", DbType="NVarChar(50)")]
		public string AccName
		{
			get
			{
				return this._AccName;
			}
			set
			{
				if ((this._AccName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccNameChanging(value);
					this.SendPropertyChanging();
					this._AccName = value;
					this.SendPropertyChanged("AccName");
					this.OnAccNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrTotal", DbType="Money")]
		public System.Nullable<decimal> OrTotal
		{
			get
			{
				return this._OrTotal;
			}
			set
			{
				if ((this._OrTotal != value))
				{
					this.OnOrTotalChanging(value);
					this.SendPropertyChanging();
					this._OrTotal = value;
					this.SendPropertyChanged("OrTotal");
					this.OnOrTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrDate
		{
			get
			{
				return this._OrDate;
			}
			set
			{
				if ((this._OrDate != value))
				{
					this.OnOrDateChanging(value);
					this.SendPropertyChanging();
					this._OrDate = value;
					this.SendPropertyChanged("OrDate");
					this.OnOrDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdSaler", DbType="NVarChar(50)")]
		public string OrdSaler
		{
			get
			{
				return this._OrdSaler;
			}
			set
			{
				if ((this._OrdSaler != value))
				{
					this.OnOrdSalerChanging(value);
					this.SendPropertyChanging();
					this._OrdSaler = value;
					this.SendPropertyChanged("OrdSaler");
					this.OnOrdSalerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetails", ThisKey="OrId", OtherKey="OrId")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Account", ThisKey="AccName", OtherKey="AccName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._AccName = value.AccName;
					}
					else
					{
						this._AccName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrdId;
		
		private System.Nullable<int> _ProId;
		
		private System.Nullable<int> _OrdQuantity;
		
		private System.Nullable<int> _OrId;
		
		private double _OrdTotal;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrdIdChanging(int value);
    partial void OnOrdIdChanged();
    partial void OnProIdChanging(System.Nullable<int> value);
    partial void OnProIdChanged();
    partial void OnOrdQuantityChanging(System.Nullable<int> value);
    partial void OnOrdQuantityChanged();
    partial void OnOrIdChanging(System.Nullable<int> value);
    partial void OnOrIdChanged();
    partial void OnOrdTotalChanging(double value);
    partial void OnOrdTotalChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrdId
		{
			get
			{
				return this._OrdId;
			}
			set
			{
				if ((this._OrdId != value))
				{
					this.OnOrdIdChanging(value);
					this.SendPropertyChanging();
					this._OrdId = value;
					this.SendPropertyChanged("OrdId");
					this.OnOrdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProId", DbType="Int")]
		public System.Nullable<int> ProId
		{
			get
			{
				return this._ProId;
			}
			set
			{
				if ((this._ProId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProIdChanging(value);
					this.SendPropertyChanging();
					this._ProId = value;
					this.SendPropertyChanged("ProId");
					this.OnProIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdQuantity", DbType="Int")]
		public System.Nullable<int> OrdQuantity
		{
			get
			{
				return this._OrdQuantity;
			}
			set
			{
				if ((this._OrdQuantity != value))
				{
					this.OnOrdQuantityChanging(value);
					this.SendPropertyChanging();
					this._OrdQuantity = value;
					this.SendPropertyChanged("OrdQuantity");
					this.OnOrdQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrId", DbType="Int")]
		public System.Nullable<int> OrId
		{
			get
			{
				return this._OrId;
			}
			set
			{
				if ((this._OrId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrIdChanging(value);
					this.SendPropertyChanging();
					this._OrId = value;
					this.SendPropertyChanged("OrId");
					this.OnOrIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdTotal", DbType="Float NOT NULL")]
		public double OrdTotal
		{
			get
			{
				return this._OrdTotal;
			}
			set
			{
				if ((this._OrdTotal != value))
				{
					this.OnOrdTotalChanging(value);
					this.SendPropertyChanging();
					this._OrdTotal = value;
					this.SendPropertyChanged("OrdTotal");
					this.OnOrdTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrId", OtherKey="OrId", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._OrId = value.OrId;
					}
					else
					{
						this._OrId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderDetail", Storage="_Product", ThisKey="ProId", OtherKey="ProId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._ProId = value.ProId;
					}
					else
					{
						this._ProId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
